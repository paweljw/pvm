# set register 0 to max iterations (100)
PUSH 100 RPOP 0

# set register 1 to current iteration (1)
PUSH 1 RPOP 1

# mark beginning of loop
LABEL __loop
# Set flag in register 2 to 0
PUSH 0 RPOP 2

#### FIZZ ####
# iteration modulo 3
RPUSH 1 PUSH 3 MOD
# skip writing Fizz if modulo != 0 (value is true)
JUMPT __buzz
# set flag notifying that we wrote Fizz
PUSH 1 RPOP 2
# write out Fizz
PUSH 122 PUSH 122 PUSH 105 PUSH 70 PRINTA POP PRINTA POP PRINTA POP PRINTA POP

#### BUZZ ####
LABEL __buzz
RPUSH 1 PUSH 5 MOD
JUMPT __conditionally_print_number
PUSH 1 RPOP 2
# write out Buzz
PUSH 122 PUSH 122 PUSH 117 PUSH 66 PRINTA POP PRINTA POP PRINTA POP PRINTA POP
# since we definitely wrote something, jump right to counter incrementation
JUMP __increment_counter

#### Print number ####
LABEL __conditionally_print_number
# If register 2 equals 1, we printed something already, so jump over
RPUSH 2 PUSH 1 EQ JUMPT __increment_counter
# Print number
RPUSH 1 PRINT POP

#### Increment loop counter ####
LABEL __increment_counter
RPUSH 1 PUSH 1 ADD RPOP 1 RPUSH 1

#### Write newline ####
PUSH 10 PRINTA POP

# Top of stack has iteration number already, so just copy max from register,
# compare and if max has not been reached, jump to beginning of loop
RPUSH 0 EQ JUMPF __loop
